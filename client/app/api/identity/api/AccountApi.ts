/**
 * GuanPlus.Identity.WebApi
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { Http, Headers, RequestOptionsArgs, Response, URLSearchParams,
  RequestMethod } from '@angular/http';
import { Injectable, Inject, Optional }  from '@angular/core';
import { Observable } from 'rxjs/Observable';
import * as models from '../model/models';
import { IDENTITY_BASE_PATH }                                         from '../variables';
import 'rxjs/Rx';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class AccountApi {
    protected basePath = 'http://guanplus-api-identity-dev.cn-north-1.eb.amazonaws.com.cn';
    public defaultHeaders: Headers = new Headers();

    constructor(protected http: Http, @Optional()@Inject(IDENTITY_BASE_PATH) basePath: string) {
        if (basePath) {
            this.basePath = basePath;
        }
    }

    /**
     * 激活已有账户用户
     * 密码传空字符串
     * @param model 
     */
    public accountActiveExistUser (model: models.ActiveUser,
      extraHttpRequestParams?: any ): Observable<models.BoolResultModel> {
        const path = this.basePath + '/api/v1/account/active_exist';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'model' is not null or undefined
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined' +
              'when calling accountActiveExistUser.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Put,
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(model);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 激活用户
     * 
     * @param model 
     */
    public accountActiveUser (model: models.ActiveUser,
      extraHttpRequestParams?: any ): Observable<models.BoolResultModel> {
        const path = this.basePath + '/api/v1/account/active';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'model' is not null or undefined
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined' +
              'when calling accountActiveUser.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Put,
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(model);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 更改邮箱
     * true:执行成功 false:执行失败
     * @param model 
     */
    public accountChangeEmail (model: models.ChangeEmailModel,
      extraHttpRequestParams?: any ): Observable<Object> {
        const path = this.basePath + '/api/v1/account/change_email';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'model' is not null or undefined
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined' +
              'when calling accountChangeEmail.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Post,
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(model);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 修改密码
     * true:修改成功 false:修改失败
     * @param model 
     */
    public accountChangePassword (model: models.ChangePasswordModel,
      extraHttpRequestParams?: any ): Observable<Object> {
        const path = this.basePath + '/api/v1/account/change_password';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'model' is not null or undefined
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined' +
              'when calling accountChangePassword.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Post,
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(model);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 更改手机号
     * true:执行成功 false:执行失败
     * @param model 
     */
    public accountChangePhoneNumber (model: models.ChangePhoneNumber,
      extraHttpRequestParams?: any ): Observable<Object> {
        const path = this.basePath + '/api/v1/account/change_phonenumber';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'model' is not null or undefined
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined' +
              'when calling accountChangePhoneNumber.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Post,
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(model);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 核对手机版本
     * 
     * @param version 
     */
    public accountCheckMobileVersion (version: string,
      extraHttpRequestParams?: any ): Observable<boolean> {
        const path = this.basePath + '/api/v1/mobile_version';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'version' is not null or undefined
        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined' +
              'when calling accountCheckMobileVersion.');
        }
        if (version !== undefined) {
            queryParameters.set('version', String(version));
        }

        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Get,
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 提交Demo演示
     * 
     * @param model 
     */
    public accountDemoDisplay (model: models.DemoDisplayModel,
      extraHttpRequestParams?: any ): Observable<boolean> {
        const path = this.basePath + '/api/v1/account/demo_display';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'model' is not null or undefined
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined' +
              'when calling accountDemoDisplay.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Post,
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(model);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 忘记密码
     * true:执行成功 false:执行失败
     * @param model 
     */
    public accountForgetPassword (model: models.ForgetPasswordModel,
      extraHttpRequestParams?: any ): Observable<Object> {
        const path = this.basePath + '/api/v1/account/forget_password';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'model' is not null or undefined
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined' +
              'when calling accountForgetPassword.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Post,
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(model);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 验证 phone 或者 email 是否注册过
     * true:注册过 false:未注册过
     * @param phoneoremail 
     */
    public accountGet (phoneoremail: string,
      extraHttpRequestParams?: any ): Observable<models.BoolResultModel> {
        const path = this.basePath + '/api/v1/account/${phoneoremail}/check'
            .replace('${' + 'phoneoremail' + '}', String(phoneoremail));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'phoneoremail' is not null or undefined
        if (phoneoremail === null || phoneoremail === undefined) {
            throw new Error('Required parameter phoneoremail was null or undefined' +
              'when calling accountGet.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Get,
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 获取当前手机版本
     * 
     */
    public accountGetMobileCurrentVersion (extraHttpRequestParams?: any ): Observable<models.MobileCurrentVersion> {
        const path = this.basePath + '/api/v1/mobile/current_version';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Get,
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 获取此用户的所有公司信息
     * 返回值只有companyId companyName 有效
     * @param userId userId
     * @param application 
     * @param size 查多少个公司
     */
    public accountGetUserCompanies (userId: string,
      application: string,
      size?: string,
      extraHttpRequestParams?: any ): Observable<Array<models.CompanyModel>> {
        const path = this.basePath + '/api/v1/account/${userId}/companies'
            .replace('${' + 'userId' + '}', String(userId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined' +
              'when calling accountGetUserCompanies.');
        }
        // verify required parameter 'application' is not null or undefined
        if (application === null || application === undefined) {
            throw new Error('Required parameter application was null or undefined' +
              'when calling accountGetUserCompanies.');
        }
        if (application !== undefined) {
            queryParameters.set('application', String(application));
        }

        if (size !== undefined) {
            queryParameters.set('size', String(size));
        }

        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Get,
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 检查链接可用
     * 
     * @param userId 
     * @param companyId 
     * @param application 
     */
    public accountIsActivated (userId: string,
      companyId: string,
      application: string,
      extraHttpRequestParams?: any ): Observable<models.TokenModel> {
        const path = this.basePath + '/api/v1/account/checkUrl/${companyId}/${userId}'
            .replace('${' + 'userId' + '}', String(userId))
            .replace('${' + 'companyId' + '}', String(companyId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined' +
              'when calling accountIsActivated.');
        }
        // verify required parameter 'companyId' is not null or undefined
        if (companyId === null || companyId === undefined) {
            throw new Error('Required parameter companyId was null or undefined' +
              'when calling accountIsActivated.');
        }
        // verify required parameter 'application' is not null or undefined
        if (application === null || application === undefined) {
            throw new Error('Required parameter application was null or undefined' +
              'when calling accountIsActivated.');
        }
        if (application !== undefined) {
            queryParameters.set('application', String(application));
        }

        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Get,
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 登录
     * 需用户名和密码
     * @param model 
     */
    public accountLogin (model: models.LoginModel,
      extraHttpRequestParams?: any ): Observable<models.TokenModel> {
        const path = this.basePath + '/api/v1/account/token';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'model' is not null or undefined
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined' +
              'when calling accountLogin.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Post,
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(model);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 注册
     * 
     * @param model 
     */
    public accountRegister (model: models.RegisterModel,
      extraHttpRequestParams?: any ): Observable<models.TokenModel> {
        const path = this.basePath + '/api/v1/account/register';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'model' is not null or undefined
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined' +
              'when calling accountRegister.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Post,
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(model);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 申请验证码
     * true:成功 false:失败
     * @param phoneoremail 
     * @param verifyCodeType 注册: \&quot;REGISTER\&quot; 忘记密码: \&quot;FORGETPASSWORD\&quot; 更改邮箱:\&quot;CHANGEEMAIL\&quot; 更改手机号:\&quot;CHANGEPHONENUMBER\&quot;
     */
    public accountSendVerifyCode (phoneoremail: string,
      verifyCodeType: string,
      extraHttpRequestParams?: any ): Observable<models.BoolResultModel> {
        const path = this.basePath + '/api/v1/account/${phoneoremail}/${verifyCodeType}/verify_code'
            .replace('${' + 'phoneoremail' + '}', String(phoneoremail))
            .replace('${' + 'verifyCodeType' + '}', String(verifyCodeType));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'phoneoremail' is not null or undefined
        if (phoneoremail === null || phoneoremail === undefined) {
            throw new Error('Required parameter phoneoremail was null or undefined' +
              'when calling accountSendVerifyCode.');
        }
        // verify required parameter 'verifyCodeType' is not null or undefined
        if (verifyCodeType === null || verifyCodeType === undefined) {
            throw new Error('Required parameter verifyCodeType was null or undefined' +
              'when calling accountSendVerifyCode.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Get,
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 切换公司
     * 需用户名和密码
     * @param userId 
     * @param newCompanyId 
     * @param mobileVersion 
     */
    public accountSetCurrentCompany (userId: string,
      newCompanyId: string,
      mobileVersion?: string,
      extraHttpRequestParams?: any ): Observable<models.UserModel> {
        const path = this.basePath + '/api/v1/account/${userId}/set_current_company/${new_companyId}'
            .replace('${' + 'userId' + '}', String(userId))
            .replace('${' + 'new_companyId' + '}', String(newCompanyId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined' +
              'when calling accountSetCurrentCompany.');
        }
        // verify required parameter 'newCompanyId' is not null or undefined
        if (newCompanyId === null || newCompanyId === undefined) {
            throw new Error('Required parameter newCompanyId was null or undefined' +
              'when calling accountSetCurrentCompany.');
        }
        if (mobileVersion !== undefined) {
            queryParameters.set('mobileVersion', String(mobileVersion));
        }

        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Get,
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

}

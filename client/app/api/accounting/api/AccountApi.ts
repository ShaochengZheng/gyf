/**
 * GuanPlus.AccountingFirm.WebApi
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { Http, Headers, RequestOptionsArgs, Response, URLSearchParams,
  RequestMethod } from '@angular/http';
import { Injectable, Inject, Optional }  from '@angular/core';
import { Observable } from 'rxjs/Observable';
import * as models from '../model/models';
import { ACCOUNTING_BASE_PATH }                                         from '../variables';
import 'rxjs/Rx';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class AccountApi {
    protected basePath = 'http://guanplus-api-accountingfirm-dev.cn-north-1.eb.amazonaws.com.cn';
    public defaultHeaders: Headers = new Headers();

    constructor(protected http: Http, @Optional()@Inject(ACCOUNTING_BASE_PATH) basePath: string) {
        if (basePath) {
            this.basePath = basePath;
        }
    }

    /**
     * 返回账期
     * 
     * @param isCompanyPeriod 默认是返回账套区间,true返回公司所有账套区间
     */
    public accountAccountPeriod (isCompanyPeriod?: boolean,
      extraHttpRequestParams?: any ): Observable<models.AccountPeriodModel> {
        const path = this.basePath + '/api/v1/account/period';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        if (isCompanyPeriod !== undefined) {
            queryParameters.set('isCompanyPeriod', String(isCompanyPeriod));
        }

        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Get,
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 修改
     * 
     * @param model model
     */
    public accountBatch (model: Array<models.AccountModel>,
      extraHttpRequestParams?: any ): Observable<Array<models.AccountModel>> {
        const path = this.basePath + '/api/v1/account';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'model' is not null or undefined
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined' +
              'when calling accountBatch.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Put,
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(model);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 导出
     * 
     * @param year 
     * @param month 
     * @param periodType 
     */
    public accountExport (year: number,
      month: number,
      periodType?: string,
      extraHttpRequestParams?: any ): Observable<models.AccountModel> {
        const path = this.basePath + '/api/v1/account/${year}/${month}/export'
            .replace('${' + 'year' + '}', String(year))
            .replace('${' + 'month' + '}', String(month));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'year' is not null or undefined
        if (year === null || year === undefined) {
            throw new Error('Required parameter year was null or undefined' +
              'when calling accountExport.');
        }
        // verify required parameter 'month' is not null or undefined
        if (month === null || month === undefined) {
            throw new Error('Required parameter month was null or undefined' +
              'when calling accountExport.');
        }
        if (periodType !== undefined) {
            queryParameters.set('periodType', String(periodType));
        }

        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Get,
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 导出明细账或总账
     * 
     * @param year 
     * @param month 
     * @param isCurrentPeriod 
     * @param isDetailAccount 
     */
    public accountExportAccount (year: number,
      month: number,
      isCurrentPeriod?: boolean,
      isDetailAccount?: boolean,
      extraHttpRequestParams?: any ): Observable<models.DetailAccountModel> {
        const path = this.basePath + '/api/v1/account/export_account';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'year' is not null or undefined
        if (year === null || year === undefined) {
            throw new Error('Required parameter year was null or undefined' +
              'when calling accountExportAccount.');
        }
        // verify required parameter 'month' is not null or undefined
        if (month === null || month === undefined) {
            throw new Error('Required parameter month was null or undefined' +
              'when calling accountExportAccount.');
        }
        if (year !== undefined) {
            queryParameters.set('year', String(year));
        }

        if (month !== undefined) {
            queryParameters.set('month', String(month));
        }

        if (isCurrentPeriod !== undefined) {
            queryParameters.set('isCurrentPeriod', String(isCurrentPeriod));
        }

        if (isDetailAccount !== undefined) {
            queryParameters.set('isDetailAccount', String(isDetailAccount));
        }

        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Get,
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 导出上传的错误数据
     * 
     * @param attachmentId 附件id
     */
    public accountExportError (attachmentId: string,
      extraHttpRequestParams?: any ): Observable<{}> {
        const path = this.basePath + '/api/v1/account/${attachmentId}/export_error'
            .replace('${' + 'attachmentId' + '}', String(attachmentId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'attachmentId' is not null or undefined
        if (attachmentId === null || attachmentId === undefined) {
            throw new Error('Required parameter attachmentId was null or undefined' +
              'when calling accountExportError.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Get,
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 查询某个会计期间的科目余额表（注：期初查询传入0或者什么都不传）
     * 
     * @param year 年
     * @param month 月
     * @param periodType 
     */
    public accountGet (year?: number,
      month?: number,
      periodType?: string,
      extraHttpRequestParams?: any ): Observable<Array<models.AccountModel>> {
        const path = this.basePath + '/api/v1/account';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        if (year !== undefined) {
            queryParameters.set('year', String(year));
        }

        if (month !== undefined) {
            queryParameters.set('month', String(month));
        }

        if (periodType !== undefined) {
            queryParameters.set('periodType', String(periodType));
        }

        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Get,
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 获取所有科目编码和科目名称
     * 
     * @param isAll 
     */
    public accountGetAll (isAll?: string,
      extraHttpRequestParams?: any ): Observable<Array<models.AccountModel>> {
        const path = this.basePath + '/api/v1/account/all';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        if (isAll !== undefined) {
            queryParameters.set('isAll', String(isAll));
        }

        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Get,
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 明细账
     * 
     * @param accountCategoryId 
     * @param year 
     * @param month 
     * @param isCurrentPeriod 
     */
    public accountGetDetailAccount (accountCategoryId: string,
      year: number,
      month: number,
      isCurrentPeriod?: boolean,
      extraHttpRequestParams?: any ): Observable<Array<models.DetailAccountModel>> {
        const path = this.basePath + '/api/v1/account/getdetailaccount';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'accountCategoryId' is not null or undefined
        if (accountCategoryId === null || accountCategoryId === undefined) {
            throw new Error('Required parameter accountCategoryId was null or undefined' +
              'when calling accountGetDetailAccount.');
        }
        // verify required parameter 'year' is not null or undefined
        if (year === null || year === undefined) {
            throw new Error('Required parameter year was null or undefined' +
              'when calling accountGetDetailAccount.');
        }
        // verify required parameter 'month' is not null or undefined
        if (month === null || month === undefined) {
            throw new Error('Required parameter month was null or undefined' +
              'when calling accountGetDetailAccount.');
        }
        if (accountCategoryId !== undefined) {
            queryParameters.set('accountCategoryId', String(accountCategoryId));
        }

        if (year !== undefined) {
            queryParameters.set('year', String(year));
        }

        if (month !== undefined) {
            queryParameters.set('month', String(month));
        }

        if (isCurrentPeriod !== undefined) {
            queryParameters.set('isCurrentPeriod', String(isCurrentPeriod));
        }

        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Get,
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 根据id获取科目
     * 
     * @param year 
     * @param month 
     * @param id 
     */
    public accountGet_1 (year: number,
      month: number,
      id: string,
      extraHttpRequestParams?: any ): Observable<models.AccountModel> {
        const path = this.basePath + '/api/v1/account/${year}/${month}/${id}'
            .replace('${' + 'year' + '}', String(year))
            .replace('${' + 'month' + '}', String(month))
            .replace('${' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'year' is not null or undefined
        if (year === null || year === undefined) {
            throw new Error('Required parameter year was null or undefined' +
              'when calling accountGet_1.');
        }
        // verify required parameter 'month' is not null or undefined
        if (month === null || month === undefined) {
            throw new Error('Required parameter month was null or undefined' +
              'when calling accountGet_1.');
        }
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined' +
              'when calling accountGet_1.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Get,
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 导入
     * 
     * @param year 年
     * @param month 月
     */
    public accountImport (year: number,
      month: number,
      extraHttpRequestParams?: any ): Observable<Array<models.AccountModel>> {
        const path = this.basePath + '/api/v1/account/${year}/${month}/import'
            .replace('${' + 'year' + '}', String(year))
            .replace('${' + 'month' + '}', String(month));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'year' is not null or undefined
        if (year === null || year === undefined) {
            throw new Error('Required parameter year was null or undefined' +
              'when calling accountImport.');
        }
        // verify required parameter 'month' is not null or undefined
        if (month === null || month === undefined) {
            throw new Error('Required parameter month was null or undefined' +
              'when calling accountImport.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Post,
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 根据id获取账套信息
     * 
     * @param importTaskId 
     */
    public accountImportHistory (importTaskId: string,
      extraHttpRequestParams?: any ): Observable<Array<models.AccountBookModel>> {
        const path = this.basePath + '/api/v1/account/importhistory/${importTaskId}'
            .replace('${' + 'importTaskId' + '}', String(importTaskId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'importTaskId' is not null or undefined
        if (importTaskId === null || importTaskId === undefined) {
            throw new Error('Required parameter importTaskId was null or undefined' +
              'when calling accountImportHistory.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Get,
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 总账
     * 
     * @param accountCategoryId 
     * @param year 
     */
    public accountTotalAccount (accountCategoryId: string,
      year: number,
      extraHttpRequestParams?: any ): Observable<Array<models.DetailAccountModel>> {
        const path = this.basePath + '/api/v1/account/totalaccount';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'accountCategoryId' is not null or undefined
        if (accountCategoryId === null || accountCategoryId === undefined) {
            throw new Error('Required parameter accountCategoryId was null or undefined' +
              'when calling accountTotalAccount.');
        }
        // verify required parameter 'year' is not null or undefined
        if (year === null || year === undefined) {
            throw new Error('Required parameter year was null or undefined' +
              'when calling accountTotalAccount.');
        }
        if (accountCategoryId !== undefined) {
            queryParameters.set('accountCategoryId', String(accountCategoryId));
        }

        if (year !== undefined) {
            queryParameters.set('year', String(year));
        }

        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Get,
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

}

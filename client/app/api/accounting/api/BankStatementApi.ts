/**
 * GuanPlus.AccountingFirm.WebApi
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { Http, Headers, RequestOptionsArgs, Response, URLSearchParams,
  RequestMethod } from '@angular/http';
import { Injectable, Inject, Optional }  from '@angular/core';
import { Observable } from 'rxjs/Observable';
import * as models from '../model/models';
import { ACCOUNTING_BASE_PATH }                                         from '../variables';
import 'rxjs/Rx';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class BankStatementApi {
    protected basePath = 'http://guanplus-api-accountingfirm-dev.cn-north-1.eb.amazonaws.com.cn';
    public defaultHeaders: Headers = new Headers();

    constructor(protected http: Http, @Optional()@Inject(ACCOUNTING_BASE_PATH) basePath: string) {
        if (basePath) {
            this.basePath = basePath;
        }
    }

    /**
     * 增加银行互转
     * 
     * @param models 
     */
    public bankStatementAddBankTransfers (models: Array<models.BankStatementTransferItemModel>,
      extraHttpRequestParams?: any ): Observable<boolean> {
        const path = this.basePath + '/api/v1/bank_statement/transfer';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'models' is not null or undefined
        if (models === null || models === undefined) {
            throw new Error('Required parameter models was null or undefined' +
              'when calling bankStatementAddBankTransfers.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Post,
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(models);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 根据id删除银行对账
     * 
     * @param bankStatementIds 银行对账单id集合
     */
    public bankStatementDelete (bankStatementIds: Array<string>,
      extraHttpRequestParams?: any ): Observable<any> {
        const path = this.basePath + '/api/v1/bank_statement';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'bankStatementIds' is not null or undefined
        if (bankStatementIds === null || bankStatementIds === undefined) {
            throw new Error('Required parameter bankStatementIds was null or undefined' +
              'when calling bankStatementDelete.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Delete,
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(bankStatementIds);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 删除银行互转
     * 
     * @param ids 
     */
    public bankStatementDeleteTransfer (ids: Array<string>,
      extraHttpRequestParams?: any ): Observable<any> {
        const path = this.basePath + '/api/v1/bank_statement/transfer';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'ids' is not null or undefined
        if (ids === null || ids === undefined) {
            throw new Error('Required parameter ids was null or undefined' +
              'when calling bankStatementDeleteTransfer.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Delete,
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(ids);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 获取银行对账单
     * 
     * @param model 
     */
    public bankStatementGet (model: models.IdNameModel,
      extraHttpRequestParams?: any ): Observable<Array<models.BankStatementModel>> {
        const path = this.basePath + '/api/v1/bank_statement/list';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'model' is not null or undefined
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined' +
              'when calling bankStatementGet.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Post,
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(model);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param accountId 
     */
    public bankStatementGetTransfers (accountId: string,
      extraHttpRequestParams?: any ): Observable<any> {
        const path = this.basePath + '/api/v1/bank_statement/transfer';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'accountId' is not null or undefined
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined' +
              'when calling bankStatementGetTransfers.');
        }
        if (accountId !== undefined) {
            queryParameters.set('accountId', String(accountId));
        }

        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Get,
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 自动匹配查询银行对账单与交易记录的对应关系
     * 
     * @param bankAccountId 
     */
    public bankStatementMatchSearch (bankAccountId: string,
      extraHttpRequestParams?: any ): Observable<Array<models.MatchBankStatementMappingModel>> {
        const path = this.basePath + '/api/v1/bank_statement/match/${bankAccountId}'
            .replace('${' + 'bankAccountId' + '}', String(bankAccountId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'bankAccountId' is not null or undefined
        if (bankAccountId === null || bankAccountId === undefined) {
            throw new Error('Required parameter bankAccountId was null or undefined' +
              'when calling bankStatementMatchSearch.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Get,
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 根据id给银行对账添加备注
     * 
     * @param bankStatementId 银行对账单id
     * @param remark 备注
     */
    public bankStatementModiftRemarkById (bankStatementId: string,
      remark: string,
      extraHttpRequestParams?: any ): Observable<any> {
        const path = this.basePath + '/api/v1/bank_statement/${bankStatementId}'
            .replace('${' + 'bankStatementId' + '}', String(bankStatementId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'bankStatementId' is not null or undefined
        if (bankStatementId === null || bankStatementId === undefined) {
            throw new Error('Required parameter bankStatementId was null or undefined' +
              'when calling bankStatementModiftRemarkById.');
        }
        // verify required parameter 'remark' is not null or undefined
        if (remark === null || remark === undefined) {
            throw new Error('Required parameter remark was null or undefined' +
              'when calling bankStatementModiftRemarkById.');
        }
        if (remark !== undefined) {
            queryParameters.set('remark', String(remark));
        }

        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Get,
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 补全互转
     * 
     * @param models 
     */
    public bankStatementPut (models: Array<models.BankStatementTransferItemModel>,
      extraHttpRequestParams?: any ): Observable<Array<models.BankStatementTransferItemModel>> {
        const path = this.basePath + '/api/v1/bank_statement/assign_account';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'models' is not null or undefined
        if (models === null || models === undefined) {
            throw new Error('Required parameter models was null or undefined' +
              'when calling bankStatementPut.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Put,
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(models);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 新增对账映射
     * 
     * @param bankStatementMappingModels 
     */
    public bankStatementReconciliation (bankStatementMappingModels: Array<models.BankStatementMappingModel>,
      extraHttpRequestParams?: any ): Observable<any> {
        const path = this.basePath + '/api/v1/bank_statement/reconciliation';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'bankStatementMappingModels' is not null or undefined
        if (bankStatementMappingModels === null || bankStatementMappingModels === undefined) {
            throw new Error('Required parameter bankStatementMappingModels was null or undefined' +
              'when calling bankStatementReconciliation.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Post,
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(bankStatementMappingModels);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 分页获取银行对账单
     * 
     * @param bankAccountId 账号id，必传
     * @param startDate 开始时间
     * @param endDate 结束时间
     * @param keyWord 关键字
     * @param money 金额
     * @param accountTransactionType 交易类型：0、全部；1、收入；2、支出
     * @param statementStatus 对账状态：0或者空字符串&#x3D;全部；1&#x3D;未对账；2&#x3D;已经对账
     * @param sort 对账单排序&#x3D;空或者0：对账单的交易日期升序；1：对账单的交易日期降序
     * @param pageIndex 页数索引
     * @param pageSize 页数大小
     */
    public bankStatementSearch (bankAccountId: string,
      startDate?: string,
      endDate?: string,
      keyWord?: string,
      money?: string,
      accountTransactionType?: string,
      statementStatus?: string,
      sort?: string,
      pageIndex?: string,
      pageSize?: string,
      extraHttpRequestParams?: any ): Observable<models.PagedResultBankStatementModel> {
        const path = this.basePath + '/api/v1/bank_statement/search/${bankAccountId}'
            .replace('${' + 'bankAccountId' + '}', String(bankAccountId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'bankAccountId' is not null or undefined
        if (bankAccountId === null || bankAccountId === undefined) {
            throw new Error('Required parameter bankAccountId was null or undefined' +
              'when calling bankStatementSearch.');
        }
        if (startDate !== undefined) {
            queryParameters.set('startDate', String(startDate));
        }

        if (endDate !== undefined) {
            queryParameters.set('endDate', String(endDate));
        }

        if (keyWord !== undefined) {
            queryParameters.set('keyWord', String(keyWord));
        }

        if (money !== undefined) {
            queryParameters.set('money', String(money));
        }

        if (accountTransactionType !== undefined) {
            queryParameters.set('AccountTransactionType', String(accountTransactionType));
        }

        if (statementStatus !== undefined) {
            queryParameters.set('statementStatus', String(statementStatus));
        }

        if (sort !== undefined) {
            queryParameters.set('sort', String(sort));
        }

        if (pageIndex !== undefined) {
            queryParameters.set('pageIndex', String(pageIndex));
        }

        if (pageSize !== undefined) {
            queryParameters.set('pageSize', String(pageSize));
        }

        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Get,
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 银行对账单同步交易记录
     * 
     * @param bankStatementSynchronizeModels 
     */
    public bankStatementSynchronize (bankStatementSynchronizeModels: Array<models.BankStatementSynchronizeModel>,
      extraHttpRequestParams?: any ): Observable<Array<models.BankStatementModel>> {
        const path = this.basePath + '/api/v1/bank_statement/synchronize';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'bankStatementSynchronizeModels' is not null or undefined
        if (bankStatementSynchronizeModels === null || bankStatementSynchronizeModels === undefined) {
            throw new Error('Required parameter bankStatementSynchronizeModels was null or undefined' +
              'when calling bankStatementSynchronize.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Post,
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(bankStatementSynchronizeModels);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

}

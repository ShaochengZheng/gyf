/**
 * GuanPlus.AccountingFirm.WebApi
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { Http, Headers, RequestOptionsArgs, Response, URLSearchParams,
  RequestMethod } from '@angular/http';
import { Injectable, Inject, Optional }  from '@angular/core';
import { Observable } from 'rxjs/Observable';
import * as models from '../model/models';
import { ACCOUNTING_BASE_PATH }                                         from '../variables';
import 'rxjs/Rx';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class PayrollApi {
    protected basePath = 'http://guanplus-api-accountingfirm-dev.cn-north-1.eb.amazonaws.com.cn';
    public defaultHeaders: Headers = new Headers();

    constructor(protected http: Http, @Optional()@Inject(ACCOUNTING_BASE_PATH) basePath: string) {
        if (basePath) {
            this.basePath = basePath;
        }
    }

    /**
     * 删除员工工资单记录
     * 
     * @param year 
     * @param month 
     * @param contactType 
     * @param employeeId 
     */
    public payrollDelete (year: number,
      month: number,
      contactType: string,
      employeeId: string,
      extraHttpRequestParams?: any ): Observable<models.BoolResultModel> {
        const path = this.basePath + '/api/v1/payroll/${year}/${month}/${contactType}/${employeeId}'
            .replace('${' + 'year' + '}', String(year))
            .replace('${' + 'month' + '}', String(month))
            .replace('${' + 'contactType' + '}', String(contactType))
            .replace('${' + 'employeeId' + '}', String(employeeId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'year' is not null or undefined
        if (year === null || year === undefined) {
            throw new Error('Required parameter year was null or undefined' +
              'when calling payrollDelete.');
        }
        // verify required parameter 'month' is not null or undefined
        if (month === null || month === undefined) {
            throw new Error('Required parameter month was null or undefined' +
              'when calling payrollDelete.');
        }
        // verify required parameter 'contactType' is not null or undefined
        if (contactType === null || contactType === undefined) {
            throw new Error('Required parameter contactType was null or undefined' +
              'when calling payrollDelete.');
        }
        // verify required parameter 'employeeId' is not null or undefined
        if (employeeId === null || employeeId === undefined) {
            throw new Error('Required parameter employeeId was null or undefined' +
              'when calling payrollDelete.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Delete,
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 生成本月工资表
     * 
     * @param payrollModel 
     * @param generate 是否为生成 t生成 f暂存
     */
    public payrollGenerate (payrollModel: models.PayrollModel,
      generate: boolean,
      extraHttpRequestParams?: any ): Observable<models.BoolResultModel> {
        const path = this.basePath + '/api/v1/payroll';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'payrollModel' is not null or undefined
        if (payrollModel === null || payrollModel === undefined) {
            throw new Error('Required parameter payrollModel was null or undefined' +
              'when calling payrollGenerate.');
        }
        // verify required parameter 'generate' is not null or undefined
        if (generate === null || generate === undefined) {
            throw new Error('Required parameter generate was null or undefined' +
              'when calling payrollGenerate.');
        }
        if (generate !== undefined) {
            queryParameters.set('generate', String(generate));
        }

        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Post,
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(payrollModel);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 生成本月劳务表
     * 
     * @param payrollModel 
     * @param generate 是否为生成 t生成 f暂存
     */
    public payrollGenerateLabor (payrollModel: models.PayrollModel,
      generate: boolean,
      extraHttpRequestParams?: any ): Observable<models.BoolResultModel> {
        const path = this.basePath + '/api/v1/payroll/labor';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'payrollModel' is not null or undefined
        if (payrollModel === null || payrollModel === undefined) {
            throw new Error('Required parameter payrollModel was null or undefined' +
              'when calling payrollGenerateLabor.');
        }
        // verify required parameter 'generate' is not null or undefined
        if (generate === null || generate === undefined) {
            throw new Error('Required parameter generate was null or undefined' +
              'when calling payrollGenerateLabor.');
        }
        if (generate !== undefined) {
            queryParameters.set('generate', String(generate));
        }

        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Post,
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(payrollModel);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 获取该月工资单
     * 
     * @param year 
     * @param month 
     * @param contactType 
     */
    public payrollGet (year: number,
      month: number,
      contactType: string,
      extraHttpRequestParams?: any ): Observable<models.PayrollModel> {
        const path = this.basePath + '/api/v1/payroll/${year}/${month}/${contactType}'
            .replace('${' + 'year' + '}', String(year))
            .replace('${' + 'month' + '}', String(month))
            .replace('${' + 'contactType' + '}', String(contactType));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'year' is not null or undefined
        if (year === null || year === undefined) {
            throw new Error('Required parameter year was null or undefined' +
              'when calling payrollGet.');
        }
        // verify required parameter 'month' is not null or undefined
        if (month === null || month === undefined) {
            throw new Error('Required parameter month was null or undefined' +
              'when calling payrollGet.');
        }
        // verify required parameter 'contactType' is not null or undefined
        if (contactType === null || contactType === undefined) {
            throw new Error('Required parameter contactType was null or undefined' +
              'when calling payrollGet.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Get,
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 导入剩余员工
     * 
     * @param year 
     * @param month 
     * @param contactType 
     */
    public payrollImport (year: number,
      month: number,
      contactType: string,
      extraHttpRequestParams?: any ): Observable<Array<models.EmployeePayrollModel>> {
        const path = this.basePath + '/api/v1/payroll/import/${year}/${month}/${contactType}'
            .replace('${' + 'year' + '}', String(year))
            .replace('${' + 'month' + '}', String(month))
            .replace('${' + 'contactType' + '}', String(contactType));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'year' is not null or undefined
        if (year === null || year === undefined) {
            throw new Error('Required parameter year was null or undefined' +
              'when calling payrollImport.');
        }
        // verify required parameter 'month' is not null or undefined
        if (month === null || month === undefined) {
            throw new Error('Required parameter month was null or undefined' +
              'when calling payrollImport.');
        }
        // verify required parameter 'contactType' is not null or undefined
        if (contactType === null || contactType === undefined) {
            throw new Error('Required parameter contactType was null or undefined' +
              'when calling payrollImport.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Get,
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

}

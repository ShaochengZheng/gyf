/**
 * GuanPlus.AccountingFirm.WebApi
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { Http, Headers, RequestOptionsArgs, Response, URLSearchParams,
  RequestMethod } from '@angular/http';
import { Injectable, Inject, Optional }  from '@angular/core';
import { Observable } from 'rxjs/Observable';
import * as models from '../model/models';
import { ACCOUNTING_BASE_PATH }                                         from '../variables';
import 'rxjs/Rx';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class ChartApi {
    protected basePath = 'http://guanplus-api-accountingfirm-dev.cn-north-1.eb.amazonaws.com.cn';
    public defaultHeaders: Headers = new Headers();

    constructor(protected http: Http, @Optional()@Inject(ACCOUNTING_BASE_PATH) basePath: string) {
        if (basePath) {
            this.basePath = basePath;
        }
    }

    /**
     * 资产负债表
     * 
     * @param year 
     * @param month 
     */
    public chartAssets (year: number,
      month: number,
      extraHttpRequestParams?: any ): Observable<models.AssetsChartModel> {
        const path = this.basePath + '/api/v1/chart/assets';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'year' is not null or undefined
        if (year === null || year === undefined) {
            throw new Error('Required parameter year was null or undefined' +
              'when calling chartAssets.');
        }
        // verify required parameter 'month' is not null or undefined
        if (month === null || month === undefined) {
            throw new Error('Required parameter month was null or undefined' +
              'when calling chartAssets.');
        }
        if (year !== undefined) {
            queryParameters.set('year', String(year));
        }

        if (month !== undefined) {
            queryParameters.set('month', String(month));
        }

        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Get,
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 城建税 教育附加 地方教育附加 税申报表
     * 
     * @param interval 
     */
    public chartBuildingTax (interval: string,
      extraHttpRequestParams?: any ): Observable<models.BuildingTaxModel> {
        const path = this.basePath + '/api/v1/chart/building_tax';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'interval' is not null or undefined
        if (interval === null || interval === undefined) {
            throw new Error('Required parameter interval was null or undefined' +
              'when calling chartBuildingTax.');
        }
        if (interval !== undefined) {
            queryParameters.set('interval', String(interval));
        }

        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Get,
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 城建税 教育附加 地方教育附加 税申报表
     * 
     * @param year 
     * @param month 
     */
    public chartBuildingTax_1 (year: number,
      month: number,
      extraHttpRequestParams?: any ): Observable<models.BuildingTaxModel> {
        const path = this.basePath + '/api/v1/chart/genera_building_tax';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'year' is not null or undefined
        if (year === null || year === undefined) {
            throw new Error('Required parameter year was null or undefined' +
              'when calling chartBuildingTax_1.');
        }
        // verify required parameter 'month' is not null or undefined
        if (month === null || month === undefined) {
            throw new Error('Required parameter month was null or undefined' +
              'when calling chartBuildingTax_1.');
        }
        if (year !== undefined) {
            queryParameters.set('year', String(year));
        }

        if (month !== undefined) {
            queryParameters.set('month', String(month));
        }

        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Get,
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 现金流量表
     * 
     * @param year 
     * @param month 
     */
    public chartCashFlow (year: number,
      month: number,
      extraHttpRequestParams?: any ): Observable<models.CashProfitChartModel> {
        const path = this.basePath + '/api/v1/chart/cash';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'year' is not null or undefined
        if (year === null || year === undefined) {
            throw new Error('Required parameter year was null or undefined' +
              'when calling chartCashFlow.');
        }
        // verify required parameter 'month' is not null or undefined
        if (month === null || month === undefined) {
            throw new Error('Required parameter month was null or undefined' +
              'when calling chartCashFlow.');
        }
        if (year !== undefined) {
            queryParameters.set('year', String(year));
        }

        if (month !== undefined) {
            queryParameters.set('month', String(month));
        }

        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Get,
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 获取往来个人详情
     * 
     * @param contactId 
     * @param year 
     * @param month 
     * @param keyword 
     */
    public chartContact (contactId: string,
      year: number,
      month: number,
      keyword?: string,
      extraHttpRequestParams?: any ): Observable<models.ContactDetailsModel> {
        const path = this.basePath + '/api/v1/chart/contact_detail';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'contactId' is not null or undefined
        if (contactId === null || contactId === undefined) {
            throw new Error('Required parameter contactId was null or undefined' +
              'when calling chartContact.');
        }
        // verify required parameter 'year' is not null or undefined
        if (year === null || year === undefined) {
            throw new Error('Required parameter year was null or undefined' +
              'when calling chartContact.');
        }
        // verify required parameter 'month' is not null or undefined
        if (month === null || month === undefined) {
            throw new Error('Required parameter month was null or undefined' +
              'when calling chartContact.');
        }
        if (contactId !== undefined) {
            queryParameters.set('contactId', String(contactId));
        }

        if (year !== undefined) {
            queryParameters.set('year', String(year));
        }

        if (month !== undefined) {
            queryParameters.set('month', String(month));
        }

        if (keyword !== undefined) {
            queryParameters.set('keyword', String(keyword));
        }

        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Get,
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 获取往来明细表
     * 
     * @param year 
     * @param month 
     * @param type 0 1 2 3 应收 应付 其他应收 其他应付
     * @param keyword 关键词
     * @param pageIndex 
     * @param pageSize 
     */
    public chartContactChart (year: number,
      month: number,
      type: string,
      keyword?: string,
      pageIndex?: string,
      pageSize?: string,
      extraHttpRequestParams?: any ): Observable<models.PagedResultContactChartModel> {
        const path = this.basePath + '/api/v1/chart/contact';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'year' is not null or undefined
        if (year === null || year === undefined) {
            throw new Error('Required parameter year was null or undefined' +
              'when calling chartContactChart.');
        }
        // verify required parameter 'month' is not null or undefined
        if (month === null || month === undefined) {
            throw new Error('Required parameter month was null or undefined' +
              'when calling chartContactChart.');
        }
        // verify required parameter 'type' is not null or undefined
        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined' +
              'when calling chartContactChart.');
        }
        if (year !== undefined) {
            queryParameters.set('year', String(year));
        }

        if (month !== undefined) {
            queryParameters.set('month', String(month));
        }

        if (type !== undefined) {
            queryParameters.set('type', String(type));
        }

        if (keyword !== undefined) {
            queryParameters.set('keyword', String(keyword));
        }

        if (pageIndex !== undefined) {
            queryParameters.set('pageIndex', String(pageIndex));
        }

        if (pageSize !== undefined) {
            queryParameters.set('pageSize', String(pageSize));
        }

        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Get,
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 导出个税往来个人详情
     * 
     * @param year 
     * @param month 
     * @param keyword 
     * @param contactId 
     */
    public chartContactDetailExport (year: number,
      month: number,
      keyword?: string,
      contactId?: string,
      extraHttpRequestParams?: any ): Observable<string> {
        const path = this.basePath + '/api/v1/chart/contact_detail/export';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'year' is not null or undefined
        if (year === null || year === undefined) {
            throw new Error('Required parameter year was null or undefined' +
              'when calling chartContactDetailExport.');
        }
        // verify required parameter 'month' is not null or undefined
        if (month === null || month === undefined) {
            throw new Error('Required parameter month was null or undefined' +
              'when calling chartContactDetailExport.');
        }
        if (year !== undefined) {
            queryParameters.set('year', String(year));
        }

        if (month !== undefined) {
            queryParameters.set('month', String(month));
        }

        if (keyword !== undefined) {
            queryParameters.set('keyword', String(keyword));
        }

        if (contactId !== undefined) {
            queryParameters.set('contactId', String(contactId));
        }

        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Get,
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 《本期抵扣进项税额结构明细表》
     * 
     * @param year 
     * @param month 
     */
    public chartDeductionOfInputTax (year: number,
      month: number,
      extraHttpRequestParams?: any ): Observable<models.DeductionOfInputTaxModel> {
        const path = this.basePath + '/api/v1/chart/general_vat/deduction';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'year' is not null or undefined
        if (year === null || year === undefined) {
            throw new Error('Required parameter year was null or undefined' +
              'when calling chartDeductionOfInputTax.');
        }
        // verify required parameter 'month' is not null or undefined
        if (month === null || month === undefined) {
            throw new Error('Required parameter month was null or undefined' +
              'when calling chartDeductionOfInputTax.');
        }
        if (year !== undefined) {
            queryParameters.set('year', String(year));
        }

        if (month !== undefined) {
            queryParameters.set('month', String(month));
        }

        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Get,
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 《增值税纳税申报表附列资料（一）》（本期销售情况明细）附件一
     * 
     * @param year 
     * @param month 
     */
    public chartDetailsForCurrentSales (year: number,
      month: number,
      extraHttpRequestParams?: any ): Observable<models.CurrentSalesModel> {
        const path = this.basePath + '/api/v1/chart/general_vat/currentSales';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'year' is not null or undefined
        if (year === null || year === undefined) {
            throw new Error('Required parameter year was null or undefined' +
              'when calling chartDetailsForCurrentSales.');
        }
        // verify required parameter 'month' is not null or undefined
        if (month === null || month === undefined) {
            throw new Error('Required parameter month was null or undefined' +
              'when calling chartDetailsForCurrentSales.');
        }
        if (year !== undefined) {
            queryParameters.set('year', String(year));
        }

        if (month !== undefined) {
            queryParameters.set('month', String(month));
        }

        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Get,
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 《增值税纳税申报表附列资料（二）》（本期进项税额明细）
     * 
     * @param year 
     * @param month 
     */
    public chartDetailsForInputValueAddedTax (year: number,
      month: number,
      extraHttpRequestParams?: any ): Observable<models.InputValueModel> {
        const path = this.basePath + '/api/v1/chart/general_vat/inputValue';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'year' is not null or undefined
        if (year === null || year === undefined) {
            throw new Error('Required parameter year was null or undefined' +
              'when calling chartDetailsForInputValueAddedTax.');
        }
        // verify required parameter 'month' is not null or undefined
        if (month === null || month === undefined) {
            throw new Error('Required parameter month was null or undefined' +
              'when calling chartDetailsForInputValueAddedTax.');
        }
        if (year !== undefined) {
            queryParameters.set('year', String(year));
        }

        if (month !== undefined) {
            queryParameters.set('month', String(month));
        }

        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Get,
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 《固定资产（不含不动产）进项税额抵扣情况表》
     * 
     * @param year 
     * @param month 
     */
    public chartExcludingImmovableProperties (year: number,
      month: number,
      extraHttpRequestParams?: any ): Observable<models.ExcludingImmovableModel> {
        const path = this.basePath + '/api/v1/chart/general_vat/fixedAsset';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'year' is not null or undefined
        if (year === null || year === undefined) {
            throw new Error('Required parameter year was null or undefined' +
              'when calling chartExcludingImmovableProperties.');
        }
        // verify required parameter 'month' is not null or undefined
        if (month === null || month === undefined) {
            throw new Error('Required parameter month was null or undefined' +
              'when calling chartExcludingImmovableProperties.');
        }
        if (year !== undefined) {
            queryParameters.set('year', String(year));
        }

        if (month !== undefined) {
            queryParameters.set('month', String(month));
        }

        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Get,
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 一般纳税人
     * 
     * @param year 
     * @param month 
     */
    public chartGeneralValueAddedTax (year: number,
      month: number,
      extraHttpRequestParams?: any ): Observable<models.GVATModel> {
        const path = this.basePath + '/api/v1/chart/general_vat';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'year' is not null or undefined
        if (year === null || year === undefined) {
            throw new Error('Required parameter year was null or undefined' +
              'when calling chartGeneralValueAddedTax.');
        }
        // verify required parameter 'month' is not null or undefined
        if (month === null || month === undefined) {
            throw new Error('Required parameter month was null or undefined' +
              'when calling chartGeneralValueAddedTax.');
        }
        if (year !== undefined) {
            queryParameters.set('year', String(year));
        }

        if (month !== undefined) {
            queryParameters.set('month', String(month));
        }

        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Get,
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 导出个税
     * 
     * @param year 
     * @param month 
     */
    public chartIndividualIncomeTax (year: number,
      month: number,
      extraHttpRequestParams?: any ): Observable<string> {
        const path = this.basePath + '/api/v1/chart/iit/export';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'year' is not null or undefined
        if (year === null || year === undefined) {
            throw new Error('Required parameter year was null or undefined' +
              'when calling chartIndividualIncomeTax.');
        }
        // verify required parameter 'month' is not null or undefined
        if (month === null || month === undefined) {
            throw new Error('Required parameter month was null or undefined' +
              'when calling chartIndividualIncomeTax.');
        }
        if (year !== undefined) {
            queryParameters.set('year', String(year));
        }

        if (month !== undefined) {
            queryParameters.set('month', String(month));
        }

        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Get,
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 个税申报表
     * 
     * @param year 
     * @param month 
     */
    public chartPersonalTax (year: number,
      month: number,
      extraHttpRequestParams?: any ): Observable<Array<models.PersonalIncomeTaxModel>> {
        const path = this.basePath + '/api/v1/chart/personal_tax';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'year' is not null or undefined
        if (year === null || year === undefined) {
            throw new Error('Required parameter year was null or undefined' +
              'when calling chartPersonalTax.');
        }
        // verify required parameter 'month' is not null or undefined
        if (month === null || month === undefined) {
            throw new Error('Required parameter month was null or undefined' +
              'when calling chartPersonalTax.');
        }
        if (year !== undefined) {
            queryParameters.set('year', String(year));
        }

        if (month !== undefined) {
            queryParameters.set('month', String(month));
        }

        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Get,
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 利润表
     * 
     * @param year 
     * @param month 
     */
    public chartProfit (year: number,
      month: number,
      extraHttpRequestParams?: any ): Observable<models.CashProfitChartModel> {
        const path = this.basePath + '/api/v1/chart/profit';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'year' is not null or undefined
        if (year === null || year === undefined) {
            throw new Error('Required parameter year was null or undefined' +
              'when calling chartProfit.');
        }
        // verify required parameter 'month' is not null or undefined
        if (month === null || month === undefined) {
            throw new Error('Required parameter month was null or undefined' +
              'when calling chartProfit.');
        }
        if (year !== undefined) {
            queryParameters.set('year', String(year));
        }

        if (month !== undefined) {
            queryParameters.set('month', String(month));
        }

        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Get,
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 修改一般纳税人表格值
     * 
     * @param model 
     */
    public chartUpdateCahrt (model: models.GeneralChartSettingModel,
      extraHttpRequestParams?: any ): Observable<boolean> {
        const path = this.basePath + '/api/v1/chart/general_vat';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'model' is not null or undefined
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined' +
              'when calling chartUpdateCahrt.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Post,
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(model);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 增值税申报表
     * 
     * @param interval 
     */
    public chartValueAddedTax (interval: string,
      extraHttpRequestParams?: any ): Observable<models.VATModel> {
        const path = this.basePath + '/api/v1/chart/vat';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'interval' is not null or undefined
        if (interval === null || interval === undefined) {
            throw new Error('Required parameter interval was null or undefined' +
              'when calling chartValueAddedTax.');
        }
        if (interval !== undefined) {
            queryParameters.set('interval', String(interval));
        }

        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Get,
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

}

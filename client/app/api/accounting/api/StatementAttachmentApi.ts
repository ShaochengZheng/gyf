/**
 * GuanPlus.AccountingFirm.WebApi
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { Http, Headers, RequestOptionsArgs, Response, URLSearchParams,
  RequestMethod } from '@angular/http';
import { Injectable, Inject, Optional }  from '@angular/core';
import { Observable } from 'rxjs/Observable';
import * as models from '../model/models';
import { ACCOUNTING_BASE_PATH }                                         from '../variables';
import 'rxjs/Rx';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class StatementAttachmentApi {
    protected basePath = 'http://guanplus-api-accountingfirm-dev.cn-north-1.eb.amazonaws.com.cn';
    public defaultHeaders: Headers = new Headers();

    constructor(protected http: Http, @Optional()@Inject(ACCOUNTING_BASE_PATH) basePath: string) {
        if (basePath) {
            this.basePath = basePath;
        }
    }

    /**
     * 删除对账单解析状态
     * 
     * @param statementAttachmentIds 银行对账单附件id集合
     */
    public statementAttachmentDelete (statementAttachmentIds: Array<string>,
      extraHttpRequestParams?: any ): Observable<boolean> {
        const path = this.basePath + '/api/v1/statement_attachment';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'statementAttachmentIds' is not null or undefined
        if (statementAttachmentIds === null || statementAttachmentIds === undefined) {
            throw new Error('Required parameter statementAttachmentIds was null or undefined' +
              'when calling statementAttachmentDelete.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Delete,
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(statementAttachmentIds);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Mapping结果导出
     * 
     * @param statementAttachmentId 银行对账单附件id
     */
    public statementAttachmentExport (statementAttachmentId: string,
      extraHttpRequestParams?: any ): Observable<{}> {
        const path = this.basePath + '/api/v1/statement_attachment/${statementAttachmentId}/export'
            .replace('${' + 'statementAttachmentId' + '}', String(statementAttachmentId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'statementAttachmentId' is not null or undefined
        if (statementAttachmentId === null || statementAttachmentId === undefined) {
            throw new Error('Required parameter statementAttachmentId was null or undefined' +
              'when calling statementAttachmentExport.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Get,
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 获取保存后的状态
     * 
     * @param statementAttachmentId 银行对账单附件Id
     */
    public statementAttachmentGetStatus (statementAttachmentId: string,
      extraHttpRequestParams?: any ): Observable<models.StatementAttachmentModel> {
        const path = this.basePath + '/api/v1/statement_attachment/${statementAttachmentId}/status'
            .replace('${' + 'statementAttachmentId' + '}', String(statementAttachmentId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'statementAttachmentId' is not null or undefined
        if (statementAttachmentId === null || statementAttachmentId === undefined) {
            throw new Error('Required parameter statementAttachmentId was null or undefined' +
              'when calling statementAttachmentGetStatus.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Get,
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 分页获取对账单上传历史
     * 
     * @param bankAccountId 银行账户id
     * @param startDate 开始日期
     * @param endDate 结束日期
     * @param pageIndex 页数索引
     * @param pageSize 页数大小
     */
    public statementAttachmentHistory (bankAccountId: string,
      startDate?: string,
      endDate?: string,
      pageIndex?: string,
      pageSize?: string,
      extraHttpRequestParams?: any ): Observable<models.PagedResultStatementAttachmentModel> {
        const path = this.basePath + '/api/v1/statement_attachment/${bankAccountId}/history'
            .replace('${' + 'bankAccountId' + '}', String(bankAccountId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'bankAccountId' is not null or undefined
        if (bankAccountId === null || bankAccountId === undefined) {
            throw new Error('Required parameter bankAccountId was null or undefined' +
              'when calling statementAttachmentHistory.');
        }
        if (startDate !== undefined) {
            queryParameters.set('startDate', String(startDate));
        }

        if (endDate !== undefined) {
            queryParameters.set('endDate', String(endDate));
        }

        if (pageIndex !== undefined) {
            queryParameters.set('pageIndex', String(pageIndex));
        }

        if (pageSize !== undefined) {
            queryParameters.set('pageSize', String(pageSize));
        }

        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Get,
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 校验数据，保存mapping，插入对账单
     * 
     * @param model 对账单MappingModel
     */
    public statementAttachmentSave (model: models.StatementColumnMappingModel,
      extraHttpRequestParams?: any ): Observable<models.BoolResultModel> {
        const path = this.basePath + '/api/v1/statement_attachment/save';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'model' is not null or undefined
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined' +
              'when calling statementAttachmentSave.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Post,
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(model);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 测试接口，获取upload后的状态
     * 
     * @param bankAccountId 
     */
    public statementAttachmentTest (bankAccountId: string,
      extraHttpRequestParams?: any ): Observable<models.StatementAttachmentModel> {
        const path = this.basePath + '/api/v1/statement_attachment/${bankAccountId}/test'
            .replace('${' + 'bankAccountId' + '}', String(bankAccountId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'bankAccountId' is not null or undefined
        if (bankAccountId === null || bankAccountId === undefined) {
            throw new Error('Required parameter bankAccountId was null or undefined' +
              'when calling statementAttachmentTest.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Get,
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 上传对账单，解析对账单  &lt;param name&#x3D;\&quot;bankAccountId\&quot;&gt;账户Id&lt;/param&gt;
     * 
     * @param bankAccountId 
     */
    public statementAttachmentUpload (bankAccountId: string,
      extraHttpRequestParams?: any ): Observable<models.StatementColumnMappingModel> {
        const path = this.basePath + '/api/v1/statement_attachment/${bankAccountId}/upload'
            .replace('${' + 'bankAccountId' + '}', String(bankAccountId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'bankAccountId' is not null or undefined
        if (bankAccountId === null || bankAccountId === undefined) {
            throw new Error('Required parameter bankAccountId was null or undefined' +
              'when calling statementAttachmentUpload.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Post,
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

}

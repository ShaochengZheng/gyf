/**
 * GuanPlus.AccountingFirm.WebApi
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { Http, Headers, RequestOptionsArgs, Response, URLSearchParams,
  RequestMethod } from '@angular/http';
import { Injectable, Inject, Optional }  from '@angular/core';
import { Observable } from 'rxjs/Observable';
import * as models from '../model/models';
import { ACCOUNTING_BASE_PATH }                                         from '../variables';
import 'rxjs/Rx';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class AccountBookApi {
    protected basePath = 'http://guanplus-api-accountingfirm-dev.cn-north-1.eb.amazonaws.com.cn';
    public defaultHeaders: Headers = new Headers();

    constructor(protected http: Http, @Optional()@Inject(ACCOUNTING_BASE_PATH) basePath: string) {
        if (basePath) {
            this.basePath = basePath;
        }
    }

    /**
     * 期初分配平衡验证
     * 
     */
    public accountBookApportionBalanceValidation (extraHttpRequestParams?: any ): Observable<models.AccountBookEnableResultModel> {
        const path = this.basePath + '/api/v1/accountbook/apportion_balance';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Get,
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 分配公司人员
     * 
     * @param models 
     */
    public accountBookAssign (models: Array<models.AccountBookAssignModel>,
      extraHttpRequestParams?: any ): Observable<models.BoolResultModel> {
        const path = this.basePath + '/api/v1/accountbook/assign';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'models' is not null or undefined
        if (models === null || models === undefined) {
            throw new Error('Required parameter models was null or undefined' +
              'when calling accountBookAssign.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Post,
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(models);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 启用公司期初账设置
     * 
     * @param isGenerate 
     */
    public accountBookEnable (isGenerate?: boolean,
      extraHttpRequestParams?: any ): Observable<models.AccountBookEnableResultModel> {
        const path = this.basePath + '/api/v1/accountbook/enable';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        if (isGenerate !== undefined) {
            queryParameters.set('isGenerate', String(isGenerate));
        }

        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Get,
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 导出账套
     * 
     * @param year 
     * @param month 
     * @param keyword 
     * @param status 
     * @param assignStatus 
     */
    public accountBookExportAccountBooks (year?: number,
      month?: number,
      keyword?: string,
      status?: string,
      assignStatus?: string,
      extraHttpRequestParams?: any ): Observable<models.PagedResultString> {
        const path = this.basePath + '/api/v1/accountbook/export_account_books';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        if (year !== undefined) {
            queryParameters.set('year', String(year));
        }

        if (month !== undefined) {
            queryParameters.set('month', String(month));
        }

        if (keyword !== undefined) {
            queryParameters.set('keyword', String(keyword));
        }

        if (status !== undefined) {
            queryParameters.set('status', String(status));
        }

        if (assignStatus !== undefined) {
            queryParameters.set('assignStatus', String(assignStatus));
        }

        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Get,
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 获取账套
     * 
     * @param pageIndex 页数索引
     * @param pageSize 页数大小
     * @param year 
     * @param month 
     * @param keyword 
     * @param status 
     * @param assignStatus 
     */
    public accountBookGet (pageIndex?: string,
      pageSize?: string,
      year?: number,
      month?: number,
      keyword?: string,
      status?: string,
      assignStatus?: string,
      extraHttpRequestParams?: any ): Observable<models.PagedResultAccountBookModel> {
        const path = this.basePath + '/api/v1/accountbook/search';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        if (pageIndex !== undefined) {
            queryParameters.set('pageIndex', String(pageIndex));
        }

        if (pageSize !== undefined) {
            queryParameters.set('pageSize', String(pageSize));
        }

        if (year !== undefined) {
            queryParameters.set('year', String(year));
        }

        if (month !== undefined) {
            queryParameters.set('month', String(month));
        }

        if (keyword !== undefined) {
            queryParameters.set('keyword', String(keyword));
        }

        if (status !== undefined) {
            queryParameters.set('status', String(status));
        }

        if (assignStatus !== undefined) {
            queryParameters.set('assignStatus', String(assignStatus));
        }

        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Get,
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 获取工人状态
     * 
     */
    public accountBookGetWorkerFlow (extraHttpRequestParams?: any ): Observable<models.WorkerStatusEnumModel> {
        const path = this.basePath + '/api/v1/accountbook/workerStatus';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Get,
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 根据id获取账套信息
     * 
     * @param id 
     */
    public accountBookGet_1 (id: string,
      extraHttpRequestParams?: any ): Observable<models.AccountBookModel> {
        const path = this.basePath + '/api/v1/accountbook/${id}'
            .replace('${' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined' +
              'when calling accountBookGet_1.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Get,
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 根据id获取账套信息
     * 
     * @param importTaskId 
     */
    public accountBookImportHistory (importTaskId: string,
      extraHttpRequestParams?: any ): Observable<Array<models.AccountBookModel>> {
        const path = this.basePath + '/api/v1/accountbook/importhistory/${importTaskId}'
            .replace('${' + 'importTaskId' + '}', String(importTaskId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'importTaskId' is not null or undefined
        if (importTaskId === null || importTaskId === undefined) {
            throw new Error('Required parameter importTaskId was null or undefined' +
              'when calling accountBookImportHistory.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Get,
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 收支发票
     * 
     * @param models 
     */
    public accountBookInvoiceAmount (models: Array<models.AccountBookInvoiceModel>,
      extraHttpRequestParams?: any ): Observable<models.BoolResultModel> {
        const path = this.basePath + '/api/v1/accountbook/invoiceamount';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'models' is not null or undefined
        if (models === null || models === undefined) {
            throw new Error('Required parameter models was null or undefined' +
              'when calling accountBookInvoiceAmount.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Post,
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(models);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 新增账套
     * 
     * @param models 
     */
    public accountBookPost (models: Array<models.AccountBookModel>,
      extraHttpRequestParams?: any ): Observable<models.AccountBookModel> {
        const path = this.basePath + '/api/v1/accountbook';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'models' is not null or undefined
        if (models === null || models === undefined) {
            throw new Error('Required parameter models was null or undefined' +
              'when calling accountBookPost.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Post,
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(models);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 修改账套
     * 
     * @param model 
     */
    public accountBookPut (model: models.AccountBookModel,
      extraHttpRequestParams?: any ): Observable<models.AccountBookModel> {
        const path = this.basePath + '/api/v1/accountbook';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'model' is not null or undefined
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined' +
              'when calling accountBookPut.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Put,
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(model);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 修改账套启用日期
     * 
     * @param year 年
     * @param month 月
     */
    public accountBookPutOpeningDate (year: number,
      month: number,
      extraHttpRequestParams?: any ): Observable<models.BoolResultModel> {
        const path = this.basePath + '/api/v1/accountbook/opening_date/${year}/${month}'
            .replace('${' + 'year' + '}', String(year))
            .replace('${' + 'month' + '}', String(month));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'year' is not null or undefined
        if (year === null || year === undefined) {
            throw new Error('Required parameter year was null or undefined' +
              'when calling accountBookPutOpeningDate.');
        }
        // verify required parameter 'month' is not null or undefined
        if (month === null || month === undefined) {
            throw new Error('Required parameter month was null or undefined' +
              'when calling accountBookPutOpeningDate.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Put,
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 修改备注
     * 
     * @param models 
     */
    public accountBookRemark (models: Array<models.AccountBookRemarkModel>,
      extraHttpRequestParams?: any ): Observable<models.BoolResultModel> {
        const path = this.basePath + '/api/v1/accountbook/remark';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'models' is not null or undefined
        if (models === null || models === undefined) {
            throw new Error('Required parameter models was null or undefined' +
              'when calling accountBookRemark.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Post,
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(models);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 重置帐套
     * 
     */
    public accountBookReset (extraHttpRequestParams?: any ): Observable<models.BoolResultModel> {
        const path = this.basePath + '/api/v1/accountbook/reset';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Put,
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 设置工人状态
     * 
     * @param status 
     */
    public accountBookSetWorkerStatus (status: string,
      extraHttpRequestParams?: any ): Observable<models.BoolResultModel> {
        const path = this.basePath + '/api/v1/accountbook/workerStatus';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'status' is not null or undefined
        if (status === null || status === undefined) {
            throw new Error('Required parameter status was null or undefined' +
              'when calling accountBookSetWorkerStatus.');
        }
        if (status !== undefined) {
            queryParameters.set('status', String(status));
        }

        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Put,
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 修改客户联系人
     * 
     * @param model 
     */
    public accountBookUpdateCustomer (model: models.UpdateAccountBookCustomerModel,
      extraHttpRequestParams?: any ): Observable<models.BoolResultModel> {
        const path = this.basePath + '/api/v1/accountbook/customer';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'model' is not null or undefined
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined' +
              'when calling accountBookUpdateCustomer.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Put,
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(model);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 上传流水帐附件
     * 
     */
    public accountBookUpload (extraHttpRequestParams?: any ): Observable<Array<models.BusinessLicenceModel>> {
        const path = this.basePath + '/api/v1/accountbook/upload';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Post,
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

}
